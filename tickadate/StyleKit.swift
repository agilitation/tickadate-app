//
//  StyleKit.swift
//  TickADate
//
//  Created by Romain Bessuges-Meusy on 18/05/2017.
//  Copyright Â© 2017 Agilitation. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawDaySummary(themeColor: UIColor = UIColor(red: 0.962, green: 0.650, blue: 0.139, alpha: 1.000)) {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 21, y: 29, width: 18, height: 2))
        themeColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 21, y: 21, width: 18, height: 2))
        themeColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 21, y: 37, width: 18, height: 2))
        themeColor.setFill()
        rectangle3Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 48, y: 29.5))
        ovalPath.addCurve(to: CGPoint(x: 29.5, y: 48), controlPoint1: CGPoint(x: 48, y: 39.72), controlPoint2: CGPoint(x: 39.72, y: 48))
        ovalPath.addCurve(to: CGPoint(x: 11, y: 29.5), controlPoint1: CGPoint(x: 19.28, y: 48), controlPoint2: CGPoint(x: 11, y: 39.72))
        ovalPath.addCurve(to: CGPoint(x: 29.5, y: 11), controlPoint1: CGPoint(x: 11, y: 19.28), controlPoint2: CGPoint(x: 19.28, y: 11))
        ovalPath.addCurve(to: CGPoint(x: 48, y: 29.5), controlPoint1: CGPoint(x: 39.72, y: 11), controlPoint2: CGPoint(x: 48, y: 19.28))
        ovalPath.addLine(to: CGPoint(x: 46, y: 29.5))
        ovalPath.addCurve(to: CGPoint(x: 29.5, y: 13), controlPoint1: CGPoint(x: 46, y: 20.39), controlPoint2: CGPoint(x: 38.61, y: 13))
        ovalPath.addCurve(to: CGPoint(x: 13, y: 29.5), controlPoint1: CGPoint(x: 20.39, y: 13), controlPoint2: CGPoint(x: 13, y: 20.39))
        ovalPath.addCurve(to: CGPoint(x: 29.5, y: 46), controlPoint1: CGPoint(x: 13, y: 38.61), controlPoint2: CGPoint(x: 20.39, y: 46))
        ovalPath.addCurve(to: CGPoint(x: 46, y: 29.5), controlPoint1: CGPoint(x: 38.61, y: 46), controlPoint2: CGPoint(x: 46, y: 38.61))
        ovalPath.addLine(to: CGPoint(x: 48, y: 29.5))
        ovalPath.close()
        themeColor.setFill()
        ovalPath.fill()
    }

    public dynamic class func drawTick(themeColor: UIColor = UIColor(red: 0.962, green: 0.650, blue: 0.139, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Symbol Drawing
        let symbolRect = CGRect(x: 6, y: 6, width: 48, height: 48)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        StyleKit.drawCheckMark(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, themeColor: themeColor)
        context.restoreGState()
    }

    public dynamic class func drawQuickAdd(themeColor: UIColor = UIColor(red: 0.962, green: 0.650, blue: 0.139, alpha: 1.000)) {

        //// Group
        //// OuterCircle Drawing
        let outerCirclePath = UIBezierPath()
        outerCirclePath.move(to: CGPoint(x: 45.36, y: 38.65))
        outerCirclePath.addCurve(to: CGPoint(x: 29.85, y: 48.01), controlPoint1: CGPoint(x: 42.21, y: 44.39), controlPoint2: CGPoint(x: 36.33, y: 48.01))
        outerCirclePath.addCurve(to: CGPoint(x: 12, y: 29.5), controlPoint1: CGPoint(x: 19.99, y: 48.01), controlPoint2: CGPoint(x: 12, y: 39.72))
        outerCirclePath.addCurve(to: CGPoint(x: 29.85, y: 11), controlPoint1: CGPoint(x: 12, y: 19.29), controlPoint2: CGPoint(x: 19.99, y: 11))
        outerCirclePath.addCurve(to: CGPoint(x: 47.69, y: 29.5), controlPoint1: CGPoint(x: 39.71, y: 11), controlPoint2: CGPoint(x: 47.69, y: 19.29))
        outerCirclePath.addLine(to: CGPoint(x: 45.96, y: 29.5))
        outerCirclePath.addCurve(to: CGPoint(x: 29.85, y: 12.76), controlPoint1: CGPoint(x: 45.96, y: 20.25), controlPoint2: CGPoint(x: 38.74, y: 12.76))
        outerCirclePath.addCurve(to: CGPoint(x: 13.73, y: 29.5), controlPoint1: CGPoint(x: 20.95, y: 12.76), controlPoint2: CGPoint(x: 13.73, y: 20.25))
        outerCirclePath.addCurve(to: CGPoint(x: 29.85, y: 46.24), controlPoint1: CGPoint(x: 13.73, y: 38.75), controlPoint2: CGPoint(x: 20.95, y: 46.24))
        outerCirclePath.addCurve(to: CGPoint(x: 43.85, y: 37.79), controlPoint1: CGPoint(x: 35.7, y: 46.24), controlPoint2: CGPoint(x: 41, y: 42.98))
        outerCirclePath.addLine(to: CGPoint(x: 45.36, y: 38.65))
        outerCirclePath.close()
        themeColor.setFill()
        outerCirclePath.fill()


        //// PointingTriangle Drawing
        let pointingTrianglePath = UIBezierPath()
        pointingTrianglePath.move(to: CGPoint(x: 46.55, y: 27.74))
        pointingTrianglePath.addLine(to: CGPoint(x: 47.41, y: 27.74))
        pointingTrianglePath.addLine(to: CGPoint(x: 46.55, y: 27.74))
        pointingTrianglePath.close()
        pointingTrianglePath.move(to: CGPoint(x: 46.87, y: 31.11))
        pointingTrianglePath.addCurve(to: CGPoint(x: 46.22, y: 31.11), controlPoint1: CGPoint(x: 46.7, y: 31.31), controlPoint2: CGPoint(x: 46.39, y: 31.31))
        pointingTrianglePath.addLine(to: CGPoint(x: 43.2, y: 27.59))
        pointingTrianglePath.addCurve(to: CGPoint(x: 43.52, y: 26.86), controlPoint1: CGPoint(x: 42.95, y: 27.3), controlPoint2: CGPoint(x: 43.15, y: 26.86))
        pointingTrianglePath.addLine(to: CGPoint(x: 49.57, y: 26.86))
        pointingTrianglePath.addCurve(to: CGPoint(x: 49.89, y: 27.59), controlPoint1: CGPoint(x: 49.94, y: 26.86), controlPoint2: CGPoint(x: 50.14, y: 27.3))
        pointingTrianglePath.addLine(to: CGPoint(x: 46.87, y: 31.11))
        pointingTrianglePath.close()
        themeColor.setFill()
        pointingTrianglePath.fill()


        //// MinutesNeedle Drawing
        let minutesNeedlePath = UIBezierPath()
        minutesNeedlePath.move(to: CGPoint(x: 28.98, y: 27.32))
        minutesNeedlePath.addLine(to: CGPoint(x: 28.98, y: 16.09))
        minutesNeedlePath.addLine(to: CGPoint(x: 30.71, y: 16.09))
        minutesNeedlePath.addLine(to: CGPoint(x: 30.71, y: 27.32))
        minutesNeedlePath.addLine(to: CGPoint(x: 28.98, y: 27.32))
        minutesNeedlePath.close()
        themeColor.setFill()
        minutesNeedlePath.fill()


        //// HoursNeedle Drawing
        let hoursNeedlePath = UIBezierPath()
        hoursNeedlePath.move(to: CGPoint(x: 32.07, y: 29.85))
        hoursNeedlePath.addLine(to: CGPoint(x: 38.59, y: 33.88))
        hoursNeedlePath.addLine(to: CGPoint(x: 37.7, y: 35.39))
        hoursNeedlePath.addLine(to: CGPoint(x: 31.17, y: 31.35))
        hoursNeedlePath.addLine(to: CGPoint(x: 32.07, y: 29.85))
        hoursNeedlePath.close()
        themeColor.setFill()
        hoursNeedlePath.fill()


        //// InnerRing Drawing
        let innerRingPath = UIBezierPath()
        innerRingPath.move(to: CGPoint(x: 32.71, y: 29.5))
        innerRingPath.addCurve(to: CGPoint(x: 29.71, y: 32.57), controlPoint1: CGPoint(x: 32.71, y: 31.19), controlPoint2: CGPoint(x: 31.36, y: 32.57))
        innerRingPath.addCurve(to: CGPoint(x: 26.7, y: 29.5), controlPoint1: CGPoint(x: 28.05, y: 32.57), controlPoint2: CGPoint(x: 26.7, y: 31.19))
        innerRingPath.addCurve(to: CGPoint(x: 29.71, y: 26.44), controlPoint1: CGPoint(x: 26.7, y: 27.81), controlPoint2: CGPoint(x: 28.05, y: 26.44))
        innerRingPath.addCurve(to: CGPoint(x: 32.71, y: 29.5), controlPoint1: CGPoint(x: 31.36, y: 26.44), controlPoint2: CGPoint(x: 32.71, y: 27.81))
        innerRingPath.addLine(to: CGPoint(x: 30.98, y: 29.5))
        innerRingPath.addCurve(to: CGPoint(x: 29.71, y: 28.2), controlPoint1: CGPoint(x: 30.98, y: 28.79), controlPoint2: CGPoint(x: 30.41, y: 28.2))
        innerRingPath.addCurve(to: CGPoint(x: 28.43, y: 29.5), controlPoint1: CGPoint(x: 29, y: 28.2), controlPoint2: CGPoint(x: 28.43, y: 28.79))
        innerRingPath.addCurve(to: CGPoint(x: 29.71, y: 30.8), controlPoint1: CGPoint(x: 28.43, y: 30.22), controlPoint2: CGPoint(x: 29, y: 30.8))
        innerRingPath.addCurve(to: CGPoint(x: 30.98, y: 29.5), controlPoint1: CGPoint(x: 30.41, y: 30.8), controlPoint2: CGPoint(x: 30.98, y: 30.22))
        innerRingPath.addLine(to: CGPoint(x: 32.71, y: 29.5))
        innerRingPath.close()
        themeColor.setFill()
        innerRingPath.fill()
    }

    public dynamic class func drawCheckMark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, themeColor: UIColor = UIColor(red: 0.962, green: 0.650, blue: 0.139, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// CheckMark Drawing
        let checkMarkPath = UIBezierPath()
        checkMarkPath.move(to: CGPoint(x: 26.46, y: 50.63))
        checkMarkPath.addLine(to: CGPoint(x: 41.46, y: 66.63))
        checkMarkPath.addLine(to: CGPoint(x: 38.57, y: 66.61))
        checkMarkPath.addLine(to: CGPoint(x: 73.57, y: 30.61))
        checkMarkPath.addLine(to: CGPoint(x: 76.43, y: 33.39))
        checkMarkPath.addLine(to: CGPoint(x: 41.43, y: 69.39))
        checkMarkPath.addCurve(to: CGPoint(x: 38.54, y: 69.37), controlPoint1: CGPoint(x: 40.64, y: 70.21), controlPoint2: CGPoint(x: 39.32, y: 70.2))
        checkMarkPath.addLine(to: CGPoint(x: 23.54, y: 53.37))
        checkMarkPath.addLine(to: CGPoint(x: 26.46, y: 50.63))
        checkMarkPath.close()
        themeColor.setFill()
        checkMarkPath.fill()


        //// Border Drawing
        let borderPath = UIBezierPath()
        borderPath.move(to: CGPoint(x: 94, y: 50))
        borderPath.addCurve(to: CGPoint(x: 50, y: 94), controlPoint1: CGPoint(x: 94, y: 74.3), controlPoint2: CGPoint(x: 74.3, y: 94))
        borderPath.addCurve(to: CGPoint(x: 6, y: 50), controlPoint1: CGPoint(x: 25.7, y: 94), controlPoint2: CGPoint(x: 6, y: 74.3))
        borderPath.addCurve(to: CGPoint(x: 50, y: 6), controlPoint1: CGPoint(x: 6, y: 25.7), controlPoint2: CGPoint(x: 25.7, y: 6))
        borderPath.addCurve(to: CGPoint(x: 94, y: 50), controlPoint1: CGPoint(x: 74.3, y: 6), controlPoint2: CGPoint(x: 94, y: 25.7))
        borderPath.addLine(to: CGPoint(x: 90, y: 50))
        borderPath.addCurve(to: CGPoint(x: 50, y: 10), controlPoint1: CGPoint(x: 90, y: 27.91), controlPoint2: CGPoint(x: 72.09, y: 10))
        borderPath.addCurve(to: CGPoint(x: 10, y: 50), controlPoint1: CGPoint(x: 27.91, y: 10), controlPoint2: CGPoint(x: 10, y: 27.91))
        borderPath.addCurve(to: CGPoint(x: 50, y: 90), controlPoint1: CGPoint(x: 10, y: 72.09), controlPoint2: CGPoint(x: 27.91, y: 90))
        borderPath.addCurve(to: CGPoint(x: 90, y: 50), controlPoint1: CGPoint(x: 72.09, y: 90), controlPoint2: CGPoint(x: 90, y: 72.09))
        borderPath.addLine(to: CGPoint(x: 94, y: 50))
        borderPath.close()
        themeColor.setFill()
        borderPath.fill()
        
        context.restoreGState()

    }




    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
