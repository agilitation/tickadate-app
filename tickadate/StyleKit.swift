//
//  StyleKit.swift
//  TickADate
//
//  Created by Romain Bessuges-Meusy on 19/05/2017.
//  Copyright Â© 2017 Agilitation. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let eventTypesOptionsGray: UIColor = UIColor(red: 0.772, green: 0.772, blue: 0.772, alpha: 1.000)
    }

    //// Colors

    public dynamic class var eventTypesOptionsGray: UIColor { return Cache.eventTypesOptionsGray }

    //// Drawing Methods

    public dynamic class func drawDaySummary(themeColor: UIColor = UIColor(red: 0.962, green: 0.650, blue: 0.139, alpha: 1.000)) {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 21, y: 29, width: 18, height: 2))
        themeColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 21, y: 21, width: 18, height: 2))
        themeColor.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 21, y: 37, width: 18, height: 2))
        themeColor.setFill()
        rectangle3Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 48, y: 29.5))
        ovalPath.addCurve(to: CGPoint(x: 29.5, y: 48), controlPoint1: CGPoint(x: 48, y: 39.72), controlPoint2: CGPoint(x: 39.72, y: 48))
        ovalPath.addCurve(to: CGPoint(x: 11, y: 29.5), controlPoint1: CGPoint(x: 19.28, y: 48), controlPoint2: CGPoint(x: 11, y: 39.72))
        ovalPath.addCurve(to: CGPoint(x: 29.5, y: 11), controlPoint1: CGPoint(x: 11, y: 19.28), controlPoint2: CGPoint(x: 19.28, y: 11))
        ovalPath.addCurve(to: CGPoint(x: 48, y: 29.5), controlPoint1: CGPoint(x: 39.72, y: 11), controlPoint2: CGPoint(x: 48, y: 19.28))
        ovalPath.addLine(to: CGPoint(x: 46, y: 29.5))
        ovalPath.addCurve(to: CGPoint(x: 29.5, y: 13), controlPoint1: CGPoint(x: 46, y: 20.39), controlPoint2: CGPoint(x: 38.61, y: 13))
        ovalPath.addCurve(to: CGPoint(x: 13, y: 29.5), controlPoint1: CGPoint(x: 20.39, y: 13), controlPoint2: CGPoint(x: 13, y: 20.39))
        ovalPath.addCurve(to: CGPoint(x: 29.5, y: 46), controlPoint1: CGPoint(x: 13, y: 38.61), controlPoint2: CGPoint(x: 20.39, y: 46))
        ovalPath.addCurve(to: CGPoint(x: 46, y: 29.5), controlPoint1: CGPoint(x: 38.61, y: 46), controlPoint2: CGPoint(x: 46, y: 38.61))
        ovalPath.addLine(to: CGPoint(x: 48, y: 29.5))
        ovalPath.close()
        themeColor.setFill()
        ovalPath.fill()
    }

    public dynamic class func drawTick(themeColor: UIColor = UIColor(red: 0.962, green: 0.650, blue: 0.139, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Symbol Drawing
        let symbolRect = CGRect(x: 6, y: 6, width: 48, height: 48)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        StyleKit.drawCheckMark(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, themeColor: themeColor)
        context.restoreGState()
    }

    public dynamic class func drawQuickAdd(themeColor: UIColor = UIColor(red: 0.962, green: 0.650, blue: 0.139, alpha: 1.000)) {

        //// Group
        //// OuterCircle Drawing
        let outerCirclePath = UIBezierPath()
        outerCirclePath.move(to: CGPoint(x: 45.36, y: 38.65))
        outerCirclePath.addCurve(to: CGPoint(x: 29.85, y: 48.01), controlPoint1: CGPoint(x: 42.21, y: 44.39), controlPoint2: CGPoint(x: 36.33, y: 48.01))
        outerCirclePath.addCurve(to: CGPoint(x: 12, y: 29.5), controlPoint1: CGPoint(x: 19.99, y: 48.01), controlPoint2: CGPoint(x: 12, y: 39.72))
        outerCirclePath.addCurve(to: CGPoint(x: 29.85, y: 11), controlPoint1: CGPoint(x: 12, y: 19.29), controlPoint2: CGPoint(x: 19.99, y: 11))
        outerCirclePath.addCurve(to: CGPoint(x: 47.69, y: 29.5), controlPoint1: CGPoint(x: 39.71, y: 11), controlPoint2: CGPoint(x: 47.69, y: 19.29))
        outerCirclePath.addLine(to: CGPoint(x: 45.96, y: 29.5))
        outerCirclePath.addCurve(to: CGPoint(x: 29.85, y: 12.76), controlPoint1: CGPoint(x: 45.96, y: 20.25), controlPoint2: CGPoint(x: 38.74, y: 12.76))
        outerCirclePath.addCurve(to: CGPoint(x: 13.73, y: 29.5), controlPoint1: CGPoint(x: 20.95, y: 12.76), controlPoint2: CGPoint(x: 13.73, y: 20.25))
        outerCirclePath.addCurve(to: CGPoint(x: 29.85, y: 46.24), controlPoint1: CGPoint(x: 13.73, y: 38.75), controlPoint2: CGPoint(x: 20.95, y: 46.24))
        outerCirclePath.addCurve(to: CGPoint(x: 43.85, y: 37.79), controlPoint1: CGPoint(x: 35.7, y: 46.24), controlPoint2: CGPoint(x: 41, y: 42.98))
        outerCirclePath.addLine(to: CGPoint(x: 45.36, y: 38.65))
        outerCirclePath.close()
        themeColor.setFill()
        outerCirclePath.fill()


        //// PointingTriangle Drawing
        let pointingTrianglePath = UIBezierPath()
        pointingTrianglePath.move(to: CGPoint(x: 46.55, y: 27.74))
        pointingTrianglePath.addLine(to: CGPoint(x: 47.41, y: 27.74))
        pointingTrianglePath.addLine(to: CGPoint(x: 46.55, y: 27.74))
        pointingTrianglePath.close()
        pointingTrianglePath.move(to: CGPoint(x: 46.87, y: 31.11))
        pointingTrianglePath.addCurve(to: CGPoint(x: 46.22, y: 31.11), controlPoint1: CGPoint(x: 46.7, y: 31.31), controlPoint2: CGPoint(x: 46.39, y: 31.31))
        pointingTrianglePath.addLine(to: CGPoint(x: 43.2, y: 27.59))
        pointingTrianglePath.addCurve(to: CGPoint(x: 43.52, y: 26.86), controlPoint1: CGPoint(x: 42.95, y: 27.3), controlPoint2: CGPoint(x: 43.15, y: 26.86))
        pointingTrianglePath.addLine(to: CGPoint(x: 49.57, y: 26.86))
        pointingTrianglePath.addCurve(to: CGPoint(x: 49.89, y: 27.59), controlPoint1: CGPoint(x: 49.94, y: 26.86), controlPoint2: CGPoint(x: 50.14, y: 27.3))
        pointingTrianglePath.addLine(to: CGPoint(x: 46.87, y: 31.11))
        pointingTrianglePath.close()
        themeColor.setFill()
        pointingTrianglePath.fill()


        //// MinutesNeedle Drawing
        let minutesNeedlePath = UIBezierPath()
        minutesNeedlePath.move(to: CGPoint(x: 28.98, y: 27.32))
        minutesNeedlePath.addLine(to: CGPoint(x: 28.98, y: 16.09))
        minutesNeedlePath.addLine(to: CGPoint(x: 30.71, y: 16.09))
        minutesNeedlePath.addLine(to: CGPoint(x: 30.71, y: 27.32))
        minutesNeedlePath.addLine(to: CGPoint(x: 28.98, y: 27.32))
        minutesNeedlePath.close()
        themeColor.setFill()
        minutesNeedlePath.fill()


        //// HoursNeedle Drawing
        let hoursNeedlePath = UIBezierPath()
        hoursNeedlePath.move(to: CGPoint(x: 32.07, y: 29.85))
        hoursNeedlePath.addLine(to: CGPoint(x: 38.59, y: 33.88))
        hoursNeedlePath.addLine(to: CGPoint(x: 37.7, y: 35.39))
        hoursNeedlePath.addLine(to: CGPoint(x: 31.17, y: 31.35))
        hoursNeedlePath.addLine(to: CGPoint(x: 32.07, y: 29.85))
        hoursNeedlePath.close()
        themeColor.setFill()
        hoursNeedlePath.fill()


        //// InnerRing Drawing
        let innerRingPath = UIBezierPath()
        innerRingPath.move(to: CGPoint(x: 32.71, y: 29.5))
        innerRingPath.addCurve(to: CGPoint(x: 29.71, y: 32.57), controlPoint1: CGPoint(x: 32.71, y: 31.19), controlPoint2: CGPoint(x: 31.36, y: 32.57))
        innerRingPath.addCurve(to: CGPoint(x: 26.7, y: 29.5), controlPoint1: CGPoint(x: 28.05, y: 32.57), controlPoint2: CGPoint(x: 26.7, y: 31.19))
        innerRingPath.addCurve(to: CGPoint(x: 29.71, y: 26.44), controlPoint1: CGPoint(x: 26.7, y: 27.81), controlPoint2: CGPoint(x: 28.05, y: 26.44))
        innerRingPath.addCurve(to: CGPoint(x: 32.71, y: 29.5), controlPoint1: CGPoint(x: 31.36, y: 26.44), controlPoint2: CGPoint(x: 32.71, y: 27.81))
        innerRingPath.addLine(to: CGPoint(x: 30.98, y: 29.5))
        innerRingPath.addCurve(to: CGPoint(x: 29.71, y: 28.2), controlPoint1: CGPoint(x: 30.98, y: 28.79), controlPoint2: CGPoint(x: 30.41, y: 28.2))
        innerRingPath.addCurve(to: CGPoint(x: 28.43, y: 29.5), controlPoint1: CGPoint(x: 29, y: 28.2), controlPoint2: CGPoint(x: 28.43, y: 28.79))
        innerRingPath.addCurve(to: CGPoint(x: 29.71, y: 30.8), controlPoint1: CGPoint(x: 28.43, y: 30.22), controlPoint2: CGPoint(x: 29, y: 30.8))
        innerRingPath.addCurve(to: CGPoint(x: 30.98, y: 29.5), controlPoint1: CGPoint(x: 30.41, y: 30.8), controlPoint2: CGPoint(x: 30.98, y: 30.22))
        innerRingPath.addLine(to: CGPoint(x: 32.71, y: 29.5))
        innerRingPath.close()
        themeColor.setFill()
        innerRingPath.fill()
    }

    public dynamic class func drawCheckMark(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, themeColor: UIColor = UIColor(red: 0.962, green: 0.650, blue: 0.139, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// CheckMark Drawing
        let checkMarkPath = UIBezierPath()
        checkMarkPath.move(to: CGPoint(x: 26.46, y: 50.63))
        checkMarkPath.addLine(to: CGPoint(x: 41.46, y: 66.63))
        checkMarkPath.addLine(to: CGPoint(x: 38.57, y: 66.61))
        checkMarkPath.addLine(to: CGPoint(x: 73.57, y: 30.61))
        checkMarkPath.addLine(to: CGPoint(x: 76.43, y: 33.39))
        checkMarkPath.addLine(to: CGPoint(x: 41.43, y: 69.39))
        checkMarkPath.addCurve(to: CGPoint(x: 38.54, y: 69.37), controlPoint1: CGPoint(x: 40.64, y: 70.21), controlPoint2: CGPoint(x: 39.32, y: 70.2))
        checkMarkPath.addLine(to: CGPoint(x: 23.54, y: 53.37))
        checkMarkPath.addLine(to: CGPoint(x: 26.46, y: 50.63))
        checkMarkPath.close()
        themeColor.setFill()
        checkMarkPath.fill()


        //// Border Drawing
        let borderPath = UIBezierPath()
        borderPath.move(to: CGPoint(x: 94, y: 50))
        borderPath.addCurve(to: CGPoint(x: 50, y: 94), controlPoint1: CGPoint(x: 94, y: 74.3), controlPoint2: CGPoint(x: 74.3, y: 94))
        borderPath.addCurve(to: CGPoint(x: 6, y: 50), controlPoint1: CGPoint(x: 25.7, y: 94), controlPoint2: CGPoint(x: 6, y: 74.3))
        borderPath.addCurve(to: CGPoint(x: 50, y: 6), controlPoint1: CGPoint(x: 6, y: 25.7), controlPoint2: CGPoint(x: 25.7, y: 6))
        borderPath.addCurve(to: CGPoint(x: 94, y: 50), controlPoint1: CGPoint(x: 74.3, y: 6), controlPoint2: CGPoint(x: 94, y: 25.7))
        borderPath.addLine(to: CGPoint(x: 90, y: 50))
        borderPath.addCurve(to: CGPoint(x: 50, y: 10), controlPoint1: CGPoint(x: 90, y: 27.91), controlPoint2: CGPoint(x: 72.09, y: 10))
        borderPath.addCurve(to: CGPoint(x: 10, y: 50), controlPoint1: CGPoint(x: 27.91, y: 10), controlPoint2: CGPoint(x: 10, y: 27.91))
        borderPath.addCurve(to: CGPoint(x: 50, y: 90), controlPoint1: CGPoint(x: 10, y: 72.09), controlPoint2: CGPoint(x: 27.91, y: 90))
        borderPath.addCurve(to: CGPoint(x: 90, y: 50), controlPoint1: CGPoint(x: 72.09, y: 90), controlPoint2: CGPoint(x: 90, y: 72.09))
        borderPath.addLine(to: CGPoint(x: 94, y: 50))
        borderPath.close()
        themeColor.setFill()
        borderPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 330, height: 289), resizing: ResizingBehavior = .aspectFit, monthAndYear: String = "April 2017") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 330, height: 289), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 330, y: resizedFrame.height / 289)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 330, resizedFrame.height / 289)


        //// Color Declarations
        let color = UIColor(red: 0.959, green: 0.071, blue: 0.071, alpha: 1.000)
        let gradientColor = UIColor(red: 0.763, green: 0.040, blue: 0.040, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [color.cgColor, gradientColor.cgColor] as CFArray, locations: [0, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.16)
        shadow.shadowOffset = CGSize(width: 0, height: 3)
        shadow.shadowBlurRadius = 5

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 158, height: 40), byRoundingCorners: [.topLeft, .topRight], cornerRadii: CGSize(width: 8, height: 8))
        rectanglePath.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        rectanglePath.addClip()
        context.drawLinearGradient(gradient, start: CGPoint(x: 79, y: -0), end: CGPoint(x: 79, y: 40), options: [])
        context.endTransparencyLayer()
        context.restoreGState()



        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 0, y: 40, width: 158, height: 116), byRoundingCorners: [.bottomLeft, .bottomRight], cornerRadii: CGSize(width: 8, height: 8))
        rectangle2Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        UIColor.white.setFill()
        rectangle2Path.fill()
        context.restoreGState()



        //// Text Drawing
        let textRect = CGRect(x: 0, y: 0, width: 158, height: 40)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: UIFont.labelFontSize, weight: UIFontWeightMedium), NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = monthAndYear.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        monthAndYear.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 0, y: 40, width: 158, height: 116)
        let text2TextContent = "07"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 80, weight: UIFontWeightUltraLight), NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawCogWheel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 29, y: 36))
        bezierPath.addCurve(to: CGPoint(x: 28.1, y: 35.94), controlPoint1: CGPoint(x: 28.73, y: 36), controlPoint2: CGPoint(x: 28.43, y: 35.98))
        bezierPath.addLine(to: CGPoint(x: 27.64, y: 34.09))
        bezierPath.addCurve(to: CGPoint(x: 26.37, y: 33.56), controlPoint1: CGPoint(x: 27.19, y: 33.97), controlPoint2: CGPoint(x: 26.76, y: 33.79))
        bezierPath.addLine(to: CGPoint(x: 24.74, y: 34.54))
        bezierPath.addCurve(to: CGPoint(x: 23.46, y: 33.27), controlPoint1: CGPoint(x: 24.26, y: 34.17), controlPoint2: CGPoint(x: 23.83, y: 33.75))
        bezierPath.addLine(to: CGPoint(x: 24.44, y: 31.64))
        bezierPath.addCurve(to: CGPoint(x: 23.92, y: 30.36), controlPoint1: CGPoint(x: 24.21, y: 31.24), controlPoint2: CGPoint(x: 24.03, y: 30.81))
        bezierPath.addLine(to: CGPoint(x: 22.06, y: 29.9))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 29), controlPoint1: CGPoint(x: 22.02, y: 29.57), controlPoint2: CGPoint(x: 22, y: 29.27))
        bezierPath.addCurve(to: CGPoint(x: 22.06, y: 28.1), controlPoint1: CGPoint(x: 22, y: 28.73), controlPoint2: CGPoint(x: 22.02, y: 28.43))
        bezierPath.addLine(to: CGPoint(x: 23.92, y: 27.64))
        bezierPath.addCurve(to: CGPoint(x: 24.44, y: 26.37), controlPoint1: CGPoint(x: 24.03, y: 27.19), controlPoint2: CGPoint(x: 24.21, y: 26.77))
        bezierPath.addLine(to: CGPoint(x: 23.46, y: 24.74))
        bezierPath.addCurve(to: CGPoint(x: 24.74, y: 23.46), controlPoint1: CGPoint(x: 23.83, y: 24.26), controlPoint2: CGPoint(x: 24.26, y: 23.83))
        bezierPath.addLine(to: CGPoint(x: 26.37, y: 24.44))
        bezierPath.addCurve(to: CGPoint(x: 27.64, y: 23.92), controlPoint1: CGPoint(x: 26.77, y: 24.21), controlPoint2: CGPoint(x: 27.19, y: 24.04))
        bezierPath.addLine(to: CGPoint(x: 28.1, y: 22.06))
        bezierPath.addCurve(to: CGPoint(x: 29, y: 22), controlPoint1: CGPoint(x: 28.43, y: 22.02), controlPoint2: CGPoint(x: 28.74, y: 22))
        bezierPath.addCurve(to: CGPoint(x: 29.9, y: 22.06), controlPoint1: CGPoint(x: 29.27, y: 22), controlPoint2: CGPoint(x: 29.57, y: 22.02))
        bezierPath.addLine(to: CGPoint(x: 30.36, y: 23.92))
        bezierPath.addCurve(to: CGPoint(x: 31.64, y: 24.44), controlPoint1: CGPoint(x: 30.81, y: 24.03), controlPoint2: CGPoint(x: 31.24, y: 24.21))
        bezierPath.addLine(to: CGPoint(x: 33.27, y: 23.46))
        bezierPath.addCurve(to: CGPoint(x: 34.54, y: 24.74), controlPoint1: CGPoint(x: 33.75, y: 23.83), controlPoint2: CGPoint(x: 34.17, y: 24.26))
        bezierPath.addLine(to: CGPoint(x: 33.56, y: 26.37))
        bezierPath.addCurve(to: CGPoint(x: 34.09, y: 27.64), controlPoint1: CGPoint(x: 33.79, y: 26.77), controlPoint2: CGPoint(x: 33.97, y: 27.19))
        bezierPath.addLine(to: CGPoint(x: 35.94, y: 28.1))
        bezierPath.addCurve(to: CGPoint(x: 36, y: 29), controlPoint1: CGPoint(x: 35.98, y: 28.43), controlPoint2: CGPoint(x: 36, y: 28.74))
        bezierPath.addCurve(to: CGPoint(x: 35.94, y: 29.9), controlPoint1: CGPoint(x: 36, y: 29.27), controlPoint2: CGPoint(x: 35.98, y: 29.57))
        bezierPath.addLine(to: CGPoint(x: 34.09, y: 30.36))
        bezierPath.addCurve(to: CGPoint(x: 33.56, y: 31.64), controlPoint1: CGPoint(x: 33.97, y: 30.81), controlPoint2: CGPoint(x: 33.79, y: 31.24))
        bezierPath.addLine(to: CGPoint(x: 34.55, y: 33.26))
        bezierPath.addCurve(to: CGPoint(x: 33.27, y: 34.54), controlPoint1: CGPoint(x: 34.17, y: 33.75), controlPoint2: CGPoint(x: 33.75, y: 34.17))
        bezierPath.addLine(to: CGPoint(x: 31.64, y: 33.56))
        bezierPath.addCurve(to: CGPoint(x: 30.36, y: 34.09), controlPoint1: CGPoint(x: 31.24, y: 33.79), controlPoint2: CGPoint(x: 30.82, y: 33.97))
        bezierPath.addLine(to: CGPoint(x: 29.9, y: 35.94))
        bezierPath.addCurve(to: CGPoint(x: 29, y: 36), controlPoint1: CGPoint(x: 29.57, y: 35.98), controlPoint2: CGPoint(x: 29.27, y: 36))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 29, y: 31.45))
        bezierPath.addCurve(to: CGPoint(x: 29.95, y: 31.26), controlPoint1: CGPoint(x: 29.33, y: 31.45), controlPoint2: CGPoint(x: 29.65, y: 31.38))
        bezierPath.addCurve(to: CGPoint(x: 30.73, y: 30.73), controlPoint1: CGPoint(x: 30.25, y: 31.13), controlPoint2: CGPoint(x: 30.51, y: 30.95))
        bezierPath.addCurve(to: CGPoint(x: 31.25, y: 29.95), controlPoint1: CGPoint(x: 30.95, y: 30.52), controlPoint2: CGPoint(x: 31.13, y: 30.25))
        bezierPath.addCurve(to: CGPoint(x: 31.45, y: 29), controlPoint1: CGPoint(x: 31.38, y: 29.65), controlPoint2: CGPoint(x: 31.45, y: 29.33))
        bezierPath.addCurve(to: CGPoint(x: 31.25, y: 28.05), controlPoint1: CGPoint(x: 31.45, y: 28.67), controlPoint2: CGPoint(x: 31.38, y: 28.35))
        bezierPath.addCurve(to: CGPoint(x: 30.73, y: 27.27), controlPoint1: CGPoint(x: 31.13, y: 27.75), controlPoint2: CGPoint(x: 30.95, y: 27.49))
        bezierPath.addCurve(to: CGPoint(x: 29.95, y: 26.75), controlPoint1: CGPoint(x: 30.51, y: 27.05), controlPoint2: CGPoint(x: 30.25, y: 26.88))
        bezierPath.addCurve(to: CGPoint(x: 29, y: 26.55), controlPoint1: CGPoint(x: 29.65, y: 26.62), controlPoint2: CGPoint(x: 29.33, y: 26.55))
        bezierPath.addCurve(to: CGPoint(x: 27.77, y: 26.88), controlPoint1: CGPoint(x: 28.56, y: 26.55), controlPoint2: CGPoint(x: 28.15, y: 26.66))
        bezierPath.addCurve(to: CGPoint(x: 26.88, y: 27.78), controlPoint1: CGPoint(x: 27.4, y: 27.1), controlPoint2: CGPoint(x: 27.1, y: 27.4))
        bezierPath.addCurve(to: CGPoint(x: 26.55, y: 29.01), controlPoint1: CGPoint(x: 26.66, y: 28.15), controlPoint2: CGPoint(x: 26.55, y: 28.56))
        bezierPath.addCurve(to: CGPoint(x: 26.88, y: 30.23), controlPoint1: CGPoint(x: 26.55, y: 29.45), controlPoint2: CGPoint(x: 26.66, y: 29.86))
        bezierPath.addCurve(to: CGPoint(x: 27.77, y: 31.12), controlPoint1: CGPoint(x: 27.1, y: 30.61), controlPoint2: CGPoint(x: 27.4, y: 30.9))
        bezierPath.addCurve(to: CGPoint(x: 29, y: 31.45), controlPoint1: CGPoint(x: 28.15, y: 31.34), controlPoint2: CGPoint(x: 28.56, y: 31.45))
        bezierPath.close()
        StyleKit.eventTypesOptionsGray.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }




    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
